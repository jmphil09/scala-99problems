package arithmetic {

  class S99Int(val start: Int) {
    import S99Int._

    def isPrime: Boolean = {
      def helper(number: Int, counter: Int, limit: Int): Boolean = {
        if (number < 2) false
        else if (counter == limit) true
        else if (number % counter == 0) false
        else helper(number, counter + 1, limit)
      }
      val lim = math.sqrt(start).toInt + 1
      helper(start, 2, lim)
    }

  }

  object S99Int {
    implicit def int2S99Int(i: Int): S99Int = new S99Int(i)

    def gcd(a: Int, b: Int): Int = {
      if (b == 0) a
      else gcd(b, a % b)
    }

  }
} 